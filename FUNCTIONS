'''
functions: set of statements that already exists in the code,
           call it when needed rather than typing those statements everytime.

           Types of functions
                  |
       ______________________________
      |           |                  |
Built in func   Modules   User Defined func


built-in    : functions already existing

modules     : functions that have to be imported
            _______________________________
            | import <module name>        |
            | <modulename>.functionName() |
            |_____________________________|
                        or
            _______________________________________
            | from <module> import <functionName> |
            | functionName()                      |
            |_____________________________________|
 
user defined: functions defined by the user
            ______________________________
            | def <funcName>(parameter): |   <--function header, parameter is optional
            |   statement                |
            |   statements               |
            |   return <variable>        |   <--return is optional
            |____________________________|

Both Parameter and Argument are SAME but
Formal para/arg : values used in the function header
Actual para/arg : values used in the function call
return          : to return value from the function (statments after return in func definition is not executed)


Positional arg: [in func def] arguments that depend on position alone, i.e. they are just variable with no specific value ( eg: def func(a,b) )
Default arg   : [in func def] arguments that have values assigned to them, values are assigned RIGHT TO LEFT ( eg: def func(a,b,c=10) )
keyword arg   : [in func call] assigning arguments when ur calling the function with SAME variable as in func def ( eg: func(b=10,a=20) )

Local value  - is a temprory value within a function, meaning a given variable in a func definition is not defined for the entire code, rather within the definition only.
Global value - is the value accessable in the entire code and can be updated.

~how to use global

def func():              |    def func():
    z=5                  |        global z
func()                   |        z=5
print(z)                 |    func()    
                         |    print(z)
# 'z' is not defined     |    # 5                 


call by value     - changes in the func affects the global variable that are mutable (list,dictionary)
call by reference - changes in the func DOES NOT affect the global variable that are immutable (string, int, float, tuple)
'''
