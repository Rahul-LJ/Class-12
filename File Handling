#FILE HANDLING
'''

         3 types of file
     ___________________________
    |           |               |
text file    binary file     csv file

text file: -Stores data in ascii characters.
           -have EOL (end of line) terminating character '/n'
           -slower in excecution
           -.txt .dat

Binary file: -Stores data in binary characters.
             -No delimiter for a new line
             -faster in excecution
             -.bin .jpeg .exe .dat

csv file: -Stores in ascii characters, values seperated with delimiter such as  , : ; \t |
          -have EOL (end of line) terminating character '/n'
          -Somewhat smaller in size than text file
          -.csv

Modules required:
text   - nothing
binary - pickle
csv    - csv
_______________________________________________________________________

     3 modes              file_object = open('<filename>','mode')
  _____________
 |      |      |
read  write  append

read only (r)       is used to read from existing txt file                                           |
write only (w)      is used to Create a file by adding string (if file alr exist, it OVERWRITES)     |
append only (a)     same as write to add data but if file alr exist, it creates a new file           |--> add 'b' to all this for binary files  
read and write (r+) when you want to read first then APPEND data                                     |
write and read (w+) when you want to first write (overwrite) then read it                            |
________________________________________________________________________

FILE OPERATION --> open file -> read file -> write file -> close file

<fileobject> = open('<filename>','<mode>')              - basically opens the given file name
                                                          (default opens in read mode)

<fileobject> = open('<filename>','<mode>',newline='<>') - opens the given file name for csv
                                                          (mentioning newline prevents the formation of empty lists)

<fileobject>.close()                                    - breaks the connection between fileobject and file
                                                          (necessory if file opened without using 'with' function)
________________________________________________________________________
_______________
|Input  Read  |
|Output Write |
|_____________|

#remember these (reading and writing) func moves the pointer!

for text
<file_object>.read()      - reads the entire file if no argument (reads till n bytes)

<file_object>.readline()  - reads till EOL if no argument (reads till n bytes)

<file_object>.readlines() - reads entire file if no argument in a LIST (reads lines containing n bytes)

<file_object>.write()     - to add data to a file
                            if file alr exists, it'll overwrite (deletes the old, and writes the new)
                            {print of this function gives you the No.Of.Characters in write}
                            {if used in r+ mode, it REPLACES the required No.Of.Chr to the Existing one with the new}

<file_object>.writelines()- to add a LIST of data. To add many values.
                            (eg: l = ['line1','\nline2'] )
________________________________________________________________________
for csv
import csv
csv.reader(<file_object>)               - reads the entire file, returning a list

csvwriter = csv.writer(<file_object>)   - object for writer
csvwriter.writerow(<data>)              - writes the data ([record]) into the file

csvwriter.writerows(<datas>)            - writes the data ([records]) into the file
________________________________________________________________________
for binary
import pickle
pickle.load(<file_object>)        - returns the entire file data   (Unserializing,Input,Read) 
                                                                    Unpickling - byte stream to object(human readable) stream

pickle.dump(<data>,<file_object>) - writes the data into the file  (Serializing,Output,Write) 
                                                                    Pickling - object stream to byte stream
________________________________________________________________________


<file_object>.tell()      - no argument, returns the current position of the pointer

<file_object>.seek()      - for 1 argument
                            move the pointer after the given pos.of character (eg: seek(1) comes b/w 1,2 character)

                            for 2 arguments (ONLY FOR BINARY only)
                            <file_object>.seek( no of STEPS to move left (-ve) or right (+ve) , FROM )
                            where FROM can be 0 - beghinning of the file
                                              1 - current position
                                              2 - end of the file

try     - gets executed runs the code
except  - gets executed only if there IS an error in try, else this condition is skipped
else    - gets excepted if theres NO error, if theres error this condition is skipped
finally - always gets excecuted

DIRECTORY (file location)
Absolute - topmost level of the directory structure (eg: C:\ )
Relative - the relative path your currently working directory (eg: ......\12code)
Parent   - the upper directory of your relative (eg: ....\DESKOP\12code)

Exception Errors

NameError          - calling a variable/function before defining it
TypeError          - operating with wrong data type (eg: str + int)
ZeroDivisionError  - when you try to divide with zero
ValueError         - when you try defining the wrong data type (eg: int(str))
KeyError           - when the loop ends in a dictionary
AttributeError     - trying to run .<function>() when the <function> does not exist
IndentationError   - indentation error
IOError            - when the file doesn't exist
IndexError         - when the loop ends in a list
EOFError           - when the loop ends in a file
SyntaxError        - error in code's grammar (eg: print('hi'  ) 
RuntimeError       - when the loop loops forever

'''
