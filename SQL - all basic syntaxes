SQL ? 
Structured Query language
A database to store data as table, which are easy to access.
-open mySQL 8.0 by entering your password.

words in CAPS are keywords and varibles in small are variables for understanding ;)
_________________________________________________________________________
Creating a database
 __________________________
|CREATE DATABASE dbname;   |
|__________________________|

-rule for naming the is same as in python
-lines in SQL ALWAYS end with a semicolon ';'

-now, you have to let SQL know which db your working on
 so, the syntax is must before working in it
 __________________________
|USE dbname;               |
|__________________________|

Some Basic Keywords:

SHOW databases/tables     - returns a table list of databases/tables
DESCRIBE <tbname>         - it returns your field's data type,extra as a table
_________________________________________________________________________
Creating a Table with Headings
 __________________________________________________
|CREATE TABLE tbname(column1 type,column2 type);   |
|__________________________________________________|

eg: CREATE TABLE Games(ID INT,Name VARCHAR(20);
type - defines what type the column is, like:

      INT            - values in this column are integers
      FLOAT          - values in this column are decimal nubmers
      TEXT           - values in this column are large strings
      CHAR(x)        - strings with max length x (argument optional as by default its 1)
      VARCHAR(x)     - strings with max length x (x is mandatory argument and can be 1 to 255)
      NOT NULL       - the column cannot be empty
      PRIMARY KEY    - unique number for each row
      AUTO_INCREMENT - auto assigns number from 1,2,..
_________________________________________________________________________
~Adding Records, i.e. values
 ____________________________________________________________
|INSERT INTO tbname(column1,column2) values(value1,value2);  |
|____________________________________________________________|

eg: INSERT INTO Games(ID,Name) values(1,'Asphalt 9');
-number of columns here must be equal to the values ur assigning
-for MULTIPLE records, seperate records with comma like 
eg: INSERT INTO Games(ID,Name) values(1,'one'),(2,'two'),(3,'three')
_________________________________________________________________________
~Modifications

Adding a new column
 _________________________________________
|ALTER TABLE tbname ADD columnName type;  |
|_________________________________________|
eg: ALTER TABLE Games ADD Cost INT;

Adding a primary key
 ___________________________________________________
|ALTER TABLE tbname ADD PRIMARY KEY(<column name>); |
|___________________________________________________|

Adding value for Specific column
 __________________________________________________________________________________________
|UPDATE tbname SET <column> = <value> WHERE <other column name> = <value of that column>;  |
|__________________________________________________________________________________________|
eg: UPDATE Games SET Cost=100 WHERE Name='Asphalt 9'
-you can have multiple such with a ','
UPDATE Games SET column1=value1,column2=value2 WHERE Name='Asphalt 9'


Renaming a column
 _________________________________________________
|ALTER TABLE tbname CHANGE oldname newname type;  |
|_________________________________________________|
eg: ALTER TABLE Games CHANGE Cost Price FLOAT;


Changing data type of a column
 ________________________________________
|ALTER TABLE tbname MODIFY column type;  |
|________________________________________|


Assigning Value for entire with condition
 _______________________________________________________
| UPDATE tbname SET column = condition WHERE column>=5; |
|_______________________________________________________|
eg: UPDATE Games SET Price=1000 where Price>600;
    UPDATE Games SET Name=Unkown where Name IS NULL;
_________________________________________________________________________

~Viewing Table
 ______________________________
| SELECT * FROM tbname;        |
|______________________________|
eg: SELECT * FROM Games;
    SELECT Name,Price FROM Games;
returns table * for all and names of req columns seperated with ','

-Union Table
 ___________________________________________________________________________
| SELECT <column name> FROM tbname UNION SELECT <column name> FROM tbname2; |
|___________________________________________________________________________|

-Intersection Table
 ______________________________________________________________________
| SELECT tbname.column, tbname2.column FROM tbname INNER JOIN tbname2; |
|______________________________________________________________________|

-Cartisian Table (cross join)
 ______________________________________________________________________
| SELECT tbname.column, tbname2.column FROM tbname CROSS JOIN tbname2; |
|______________________________________________________________________|

-Equi-Join Table
 ___________________________________________________________________
| SELECT * FROM tbname,tbname2 WHERE tbname.column=tbname2.column;  |
|___________________________________________________________________|


______________________________________________________________________________

~Delete a Specific record
 _______________________________________________________________________
|DELETE FROM tbname WHERE column=<value of column that u wanna delete>  |
|_______________________________________________________________________|
eg: DELETE FROM Games WHERE ID=3;


-Deleting a primary key
 ___________________________________________________
|ALTER TABLE tbname DROP PRIMARY KEY;               |
|___________________________________________________|

-Deleting a column
 _______________________________________________
| ALTER TABLE tbname DROP <columnname>;         |
|_______________________________________________|

-Deleting a table
 _____________________
| DROP TABLE tbname;  |
|_____________________|
_________________________________________________________________________


to get sum of a field/attribute
table name: Marks
+---+-----+------+
|no | sub | mark |
+---+-----+------+
|1  | cs  |  60  |
|2  | eng |  60  |
+---+-----+------+

to add a+b
SELECT SUM(mark) as total from Marks;
_________________________________________________________________________

Relational operations are similar to python except:
not equal to - <>
and          - &&
or           - ||
not          - !
_________________________________________________________________________

Aliasing - when you want to name a column during its output
           eg: say you wanna name sum(column) as 'price'
           syntax: SELECT <column> as 'price' FROM tbname;

Distinct - when you dont want duplicate values of a field/column
           syntax: SELECT DISTINCT <column> FROM tbname;

wild characters - they are special characters used where condition for strings
                  _  - 1 character
                  %  - n characters

                  eg: say you need values starting with 'R' then
                  sytanx: SELECT * from tbname WHERE column LIKE 'R%';

                  eg: say you need 3 letters word ending with 'a' then
                  syntax: SELECT * FROM tbname WHERE column LIKE '__a';
_________________________________________________________________________

